buildscript {
	ext {
		springBootVersion = '1.5.3.RELEASE'
		
	}
	repositories {
	    	jcenter()
	
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		
	}
}
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

version = '0.0.1'
sourceCompatibility = 1.8
targetCompatibility = 1.8
repositories {
 mavenCentral()
}

dependencyManagement {
	imports {
		mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Camden.SR6'
	}
}
dependencies {
	compile ('org.springframework.boot:spring-boot-starter-web')
   	compile ('org.springframework.boot:spring-boot-starter-data-rest')
	compile ('org.springframework.boot:spring-boot-starter-data-jpa')
	compile ('org.springframework.boot:spring-boot-starter-security')
	compile('org.springframework.boot:spring-boot-starter-mail')
	compile ('org.springframework.cloud:spring-cloud-starter-oauth2')
	//compile('mysql:mysql-connector-java:5.1.16')
    compile ('com.zaxxer:HikariCP:2.6.3')
    compile ('mysql:mysql-connector-java')
    testCompile ('com.h2database:h2:1.4.196')
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.3.2'
}
task createFolder{
  def configDir = new File(project.buildDir.path+"/libs", "config")
  def keystoreDir = new File(project.buildDir.path+"/libs", "keystore")
  def logDir = new File(project.buildDir.path+"/libs", "log")
  def libDir = new File(project.buildDir.path+"/libs", "lib")
  
  if(!logDir.exists()){
  	logDir.mkdirs()
  }
  delete configDir
  delete libDir
  delete keystoreDir
  
  libDir.mkdirs()
  configDir.mkdirs()
  keystoreDir.mkdirs()
}
 
 //copy config
task copyConfig(type: Copy) {	
	into project.buildDir.path+"/libs/config"
    from "config"

}
 //copy keystore
task copyKeystore(type: Copy) {	
	into project.buildDir.path+"/libs/"
    from "keystore"
}

//copy dependencies
task copyRuntimeLibs(type: Copy) {
	into project.buildDir.path+"/libs/lib"
	from configurations.compile

}

task installApp(type: Jar){
	dependsOn 'createFolder', 'copyRuntimeLibs', 'copyConfig', 'copyKeystore' 

  	manifest { 
  		def manifestClasspath = configurations.compile.collect { "lib/" + it.getName() }.join(' ') 
		attributes 'Implementation-Title': 'emisolution-service', 
                   'Implementation-Version': version,
    	           'Main-Class': 'com.innoviti.quickemitab.QuickEMITab',
    			   'Class-Path': manifestClasspath
  	}  
  	baseName=project.name
  from { (configurations.compile - configurations.compile).collect { it.isDirectory() ? it : zipTree(it) } }
  with jar
     exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA' 
} 

task zip(type: Zip){
	dependsOn 'installApp'
	 from 'build/libs'
}

